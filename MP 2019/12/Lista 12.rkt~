#lang racket

(require racket/contract)

(define/contract foo number? 42)

(define/contract (dist x y)
  (-> number? number? number?)
  (abs (- x y)))

(define/contract (average x y)
  (-> number? number? number?)
  (/ (+ x y) 2))

(define/contract (square x)
  (-> number? number?)
  (* x x))

(define (sq/c y)
  (lambda (x) (= y (* x x)))) 

(define/contract (sqrt x)
  ;(-> positive? positive?)
  (->i [(argument (and/c real? positive?))]
       [result (argument) (and/c number?
                                 (sq/c argument))])
  ;; lokalne definicje
  ;; poprawienie przybliżenia pierwiastka z x
  (define (improve approx)
    (average (/ x approx) approx))
  ;; nazwy predykatów zwyczajowo kończymy znakiem zapytania
  (define (good-enough? approx)
    (< (dist x (square approx)) 0.0001))
  ;; główna procedura znajdująca rozwiązanie
  (define (iter approx)
    (cond
      [(good-enough? approx) approx]
      [else                  (iter (improve approx))]))
  
  (iter 1.0))

(define (fulfill/c p)
  (lambda (xs) (andmap p xs)))

(define/contract (filter f? xs)
  (parametric->/c [a] (->i ([p (-> a boolean?)]
                            [l (listof a)])
                           [result (p) (and/c (fulfill/c p) (listof a))]))
  (if (null? xs)
      xs
      (if (f? (car xs))
          (cons (car xs) (filter f? (cdr xs)))
          (filter f? (cdr xs)))))


