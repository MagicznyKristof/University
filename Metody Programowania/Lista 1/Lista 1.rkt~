#lang racket

10
(+ 5 3 4)
(- 9 1)
(/ 6 2)
(+ (* 2 4) (- 4 6))
(define a 3)
(define b (+ a 1))
(+ a b (* a b))
(= a b)
(if (and (> b a) (< b (* a b))) b a)
(cond [(= a 4) 6]
      [(= b 4) (+ 6 7 a)]
      [else 25])
(+ 2 (if (> b a) b a))
(* (cond [(> a b) a]
         [(< a b) b]
         [else -1])
(+ a 1))

;Zad 2
(/
 (+ 5 4
    (- 2
       (- 3
          (+ 6 (/ 4 5))
          )
       )
    )
 (* 3
    (- 6 2)
    (- 2 7)
 )
)

;Zad 4
(define (proc a b c)
  (define (min)
           (if(> a b) (
              if(> b c) c  b)
                (if(> a c) c a)
                )
    )
    
    
  (cond[(= a (min)) (+ (* b b) (* c c))]
       [(= b (min)) (+ (* a a) (* c c))]
       [(= c (min)) (+ (* a a) (* b b))]
       )
  ) 


;Zad 7   ->    (define (p) (p)) po wywolaniu (p) zawiesza sie bo wywolanie rekur.